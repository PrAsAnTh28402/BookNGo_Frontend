@startuml
actor User
participant BookingForm
participant API
participant SuccessPage
participant LeftVisual
participant RightDetails
participant Button

== User fills form ==
User -> BookingForm : Fill form {userName, email, eventId, seatsBooked}
BookingForm -> BookingForm : Validate inputs
alt Inputs invalid
    BookingForm --> User : Show error messages
else Inputs valid
    BookingForm -> API : POST /bookings {userName, eventId, seatsBooked}
    API --> BookingForm : Return bookingJSON
    note right of BookingForm
        bookingJSON = {bookingId, eventId, eventName, eventDate, eventTime, userName, seatsBooked, totalAmount}
    end note
    BookingForm -> SuccessPage : Navigate("/success", state={booking: bookingJSON})
end

== SuccessPage renders ==
SuccessPage -> SuccessPage : Read booking from state
SuccessPage -> LeftVisual : Render retro ticker and green tick
SuccessPage -> RightDetails : Pass bookingJSON
RightDetails -> RightDetails : Extract and display booking details
RightDetails -> Button : Render buttons ["Go Home", "View My Bookings"]
note right of RightDetails
booking = bookingJSON\n
buttons = [{label: "Go Home", onClick: goHome}, {label: "View My Bookings", onClick: viewBookings}]
end note

== User clicks buttons ==
User -> Button : Click "Go Home"
Button -> SuccessPage : Call navigate("/user-home")

User -> Button : Click "View My Bookings"
Button -> SuccessPage : Call navigate("/user/bookings")
note right of SuccessPage
goHome() => navigate("/user-home")\n
viewBookings() => navigate("/user/bookings")
end note

@enduml
