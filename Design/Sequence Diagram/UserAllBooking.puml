@startuml
title Sequence Diagram - User Previous Bookings Page with Search, Filter & Sort

actor User
participant "PreviousBookingsPage" as Page
participant "BookingTable" as Table
participant "Pagination" as Pagination
participant "FullScreenLoader" as Loader
participant "BookingService" as Service
participant "BookingAPI" as API

User -> Page: Load Page
Page -> Loader: setLoading(true)
Page -> Service: getUserBookings(currentPage, limit, searchTerm, filterStatus, sortBy, sortOrder)
Service -> API: GET /bookngo/bookings/user with query params
API --> Service: Response { status: Success, date: [Booking...] }
Service --> Page: return response
Page -> Page: setBookings(response.date)
Page -> Page: setTotalPages(response.totalPages or 1)
Page -> Loader: setLoading(false)
Page -> Table: render(bookings)
Table -> Table: toggleExpand(expandedRow)
note right: expandedRow = booking_id or null
User -> Table: Click row to expand/collapse
Table -> Table: update expandedRow state
Table -> Table: display nested details (event_date, booking_date)

User -> Page: Enter search / select filter / click sort
Page -> Page: update searchTerm, filterStatus, sortBy, sortOrder
Page -> Page: fetchBookings(currentPage)
Page -> Loader: setLoading(true)
Page -> Service: getUserBookings(currentPage, limit, searchTerm, filterStatus, sortBy, sortOrder)
Service -> API: GET /bookngo/bookings/user with query params
API --> Service: Response { status: Success, date: [Booking...] }
Service --> Page: return response
Page -> Page: setBookings(response.date)
Page -> Page: setTotalPages(response.totalPages or 1)
Page -> Loader: setLoading(false)
Page -> Table: render(bookings)

User -> Pagination: Click page number
Pagination -> Page: onPageChange(newPage)
Page -> Page: setCurrentPage(newPage)
Page -> Page: fetchBookings(newPage) with current search/filter/sort
Page -> Loader: setLoading(true)
Page -> Service: getUserBookings(newPage, limit, searchTerm, filterStatus, sortBy, sortOrder)
Service -> API: GET /bookngo/bookings/user with query params
API --> Service: Response { status: Success, date: [Booking...] }
Service --> Page: return response
Page -> Page: setBookings(response.date)
Page -> Page: setTotalPages(response.totalPages or 1)
Page -> Loader: setLoading(false)
Page -> Table: render(bookings)

@enduml
