@startuml
actor Admin
participant "AddEventForm Component" as Component
participant "EventService" as Service
participant "API Layer (/createEvent.js)" as API
participant "Server / Backend Controller" as Backend
participant "Database" as DB

Admin -> Component : fill form fields (title, location, event_date, time, description, category_id, image_url, capacity, price)
Component -> Component : update formData[name] = value\nclear errors[name]
Admin -> Component : click Submit
Component -> Component : handleSubmit()\nvalidateForm()
Component -> Component : tempErrors = {}\nvalidate all fields (required, numeric, date)
Component -> Component : if tempErrors not empty\nsetErrors(tempErrors)\nstop submission
Component -> Component : if valid\nprepare eventData (parseInt/parseFloat)
Component -> Service : createEvent(eventData)
Service -> API : call POST /createEvent with eventData
API -> Backend : forward request, include Authorization header
Backend -> Backend : extract user_id, role from token
Backend -> Backend : if role !== 'admin' -> 403 Forbidden
Backend -> Backend : check required fields -> 400 Missing fields
Backend -> Backend : validate numeric/date fields
Backend -> DB : INSERT INTO events(..., available_seats = capacity, ...) RETURNING *
DB --> Backend : inserted event record
Backend --> API : 201 Created + event data / error
API --> Service : return response or error
Service --> Component : receive response
Component -> Component : if success -> setSuccessMsg(response.message)\nreset formData
Component -> Component : if error -> setErrors({ api: err.message })
Component --> Admin : render form with updated state, errors, and success message

@enduml
